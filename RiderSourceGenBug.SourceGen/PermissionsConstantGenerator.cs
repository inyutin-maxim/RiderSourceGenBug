using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RiderSourceGenBug.SourceGen;

/// <summary>
/// Генератор класса с константами для прав доступа
/// </summary>
public class PermissionsConstantGenerator
{
	/// <summary>
	/// Генерация класса с константами прав доступа
	/// </summary>
	/// <param name="definitions">Коллекция объектов с описанием констант</param>
	/// <returns>Строковое представление класса с константами прав доступа</returns>
	public string Generate(IEnumerable<ConstantDefinition> definitions)
	{
		var sb = new StringBuilder();
		sb.AppendLine("/// autogenerated code");
		sb.AppendLine();
		sb.AppendLine("namespace Reo.RoutesCalculation.Constants;");
		sb.AppendLine();
		sb.AppendLine("/// <summary>");
		sb.AppendLine("/// Права доступа");
		sb.AppendLine("/// </summary>");
		sb.AppendLine("public static class PermissionConstants");
		sb.Append("{");

		foreach (var definition in definitions)
		{
			sb.AppendLine("\t");
			sb.AppendLine("\t/// <summary>");
			sb.AppendLine($"\t/// {definition.Description}");
			sb.AppendLine("\t/// </summary>");
			sb.AppendLine($"\tpublic const string {ToPascalCase(definition.PermissionName)} = \"{definition.Value}\";");
		}

		sb.AppendLine("}");

		return sb.ToString();
	}

	public string ToPascalCase(string s)
	{
		var words = s.Split(new[]
			{
				'-',
				'_'
			}, StringSplitOptions.RemoveEmptyEntries)
			.Select(word => word.Substring(0, 1)
								.ToUpper()
							+ word.Substring(1)
								.ToLower());

		return string.Concat(words);
	}
}